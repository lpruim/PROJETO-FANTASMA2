)
banco= filter(banco, !is.na(Medal))
resultado3= banco
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n()) %>%
ungroup() %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
resultado3= banco
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n()) %>%
ungroup() %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
resultados3= banco
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n()) %>%
ungroup() %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count$freq, " (", porcentagens, ")"))
# Criar o gráfico
ggplot(medal_count) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_minimal() + # Mudar para o tema desejado
ggsave("colunas-bi-freq.pdf", width = 158, height = 93, units = "mm")
if (nrow(resultados3) == 0) {
stop("O DataFrame 'resultados3' está vazio.")
}
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count$freq, " (", porcentagens, ")"))
# Criar o gráfico
ggplot(medal_count) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_minimal() +
ggsave("colunas-bi-freq.pdf", width = 158, height = 93, units = "mm")
if (nrow(resultados3) == 0) {
stop("O DataFrame 'resultados3' está vazio.")
}
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_minimal()
# Salvar o gráfico
ggsave("colunas-bi-freq.pdf", plot = p, width = 158, height = 93, units = "mm")
# Verifique se o DataFrame não está vazio
if (nrow(resultados3) == 0) {
stop("O DataFrame 'resultados3' está vazio.")
}
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_minimal()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Verifique se o DataFrame não está vazio
if (nrow(resultados3) == 0) {
stop("O DataFrame 'resultados3' está vazio.")
}
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_minimal()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
View(medal_count_top)
View(medal_count)
View(medal_count_top)
View(medal_count)
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular o total de medalhas por atleta
total_medals_top <- medal_count_top %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop')
# Criar legendas com o total de medalhas
legendas <- str_squish(str_c(total_medals_top$total_medals, " (", round(total_medals_top$total_medals / sum(total_medals_top$total_medals) * 100, 1), "%)"))
# Criar o gráfico
p <- ggplot(total_medals_top) +
aes(
x = fct_reorder(Names, total_medals, .desc = TRUE),
y = total_medals,
label = legendas
) +
geom_col(fill = "steelblue") +  # Usar uma cor uniforme para as barras
geom_text(
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Total de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular o total de medalhas por atleta
total_medals_top <- medal_count_top %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop')
# Criar legendas com o total de medalhas
legendas <- str_squish(str_c(total_medals_top$total_medals, " (", round(total_medals_top$total_medals / sum(total_medals_top$total_medals) * 100, 1), "%)"))
# Criar o gráfico
p <- ggplot(total_medals_top) +
aes(
x = fct_reorder(Names, total_medals, .desc = TRUE),
y = total_medals,
label = legendas
) +
geom_col(fill = "steelblue") +  # Usar uma cor uniforme para as barras
geom_text(
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Total de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop') %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar o gráfico com barras triplas
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, -freq),  # Reordenar pelo total de medalhas
y = freq,
fill = Medal
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0.2)) +  # Barras triplas
geom_text(
aes(label = freq),  # Adicionar rótulos com a frequência
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(x = "Atletas", y = "Número de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas1.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
