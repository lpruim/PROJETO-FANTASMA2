pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_minimal()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Verifique se o DataFrame não está vazio
if (nrow(resultados3) == 0) {
stop("O DataFrame 'resultados3' está vazio.")
}
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop') %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1))
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq, .desc = TRUE),
y = freq,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_minimal()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar legendas com frequência e porcentagem
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
# Criar o gráfico
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
# Salvar o gráfico
ggsave("colunas-bi-freq-top-medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
View(medal_count_top)
View(medal_count)
View(medal_count_top)
View(medal_count)
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular o total de medalhas por atleta
total_medals_top <- medal_count_top %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop')
# Criar legendas com o total de medalhas
legendas <- str_squish(str_c(total_medals_top$total_medals, " (", round(total_medals_top$total_medals / sum(total_medals_top$total_medals) * 100, 1), "%)"))
# Criar o gráfico
p <- ggplot(total_medals_top) +
aes(
x = fct_reorder(Names, total_medals, .desc = TRUE),
y = total_medals,
label = legendas
) +
geom_col(fill = "steelblue") +  # Usar uma cor uniforme para as barras
geom_text(
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Total de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular o total de medalhas por atleta
total_medals_top <- medal_count_top %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop')
# Criar legendas com o total de medalhas
legendas <- str_squish(str_c(total_medals_top$total_medals, " (", round(total_medals_top$total_medals / sum(total_medals_top$total_medals) * 100, 1), "%)"))
# Criar o gráfico
p <- ggplot(total_medals_top) +
aes(
x = fct_reorder(Names, total_medals, .desc = TRUE),
y = total_medals,
label = legendas
) +
geom_col(fill = "steelblue") +  # Usar uma cor uniforme para as barras
geom_text(
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Total de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
# Filtrar para os 3 atletas com mais medalhas
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq), .groups = 'drop') %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
# Filtrar o medal_count para manter apenas os 3 melhores
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
# Calcular a frequência relativa
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
# Criar o gráfico com barras triplas
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, -freq),  # Reordenar pelo total de medalhas
y = freq,
fill = Medal
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0.2)) +  # Barras triplas
geom_text(
aes(label = freq),  # Adicionar rótulos com a frequência
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(x = "Atletas", y = "Número de Medalhas") +
theme_estat()
# Salvar o gráfico
ggsave("total_medalhas_top_medalistas.pdf", plot = p, width = 158, height = 93, units = "mm")
# Contar o número de medalhas por atleta e tipo de medalha
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas1.pdf", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
medal_count <- resultados3 %>%
group_by(Names, Medal) %>%
summarise(freq = n(), .groups = 'drop')
top_medalists <- medal_count %>%
group_by(Names) %>%
summarise(total_medals = sum(freq)) %>%
arrange(desc(total_medals)) %>%
slice_head(n = 3) %>%
pull(Names)
medal_count_top <- medal_count %>%
filter(Names %in% top_medalists)
medal_count_top <- medal_count_top %>%
group_by(Names) %>%
mutate(freq_relativa = round(freq / sum(freq) * 100, 1)) %>%
ungroup()
porcentagens <- str_c(medal_count_top$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(medal_count_top$freq, " (", porcentagens, ")"))
p <- ggplot(medal_count_top) +
aes(
x = fct_reorder(Names, freq_relativa, .desc = TRUE),
y = freq_relativa,
fill = Medal,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5,
hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência Relativa (%)") +
theme_estat()
ggsave("colunas-bi-freq-top-medalistas.png", plot = p, width = 158, height = 93, units = "mm")
View(resultado2)
View(banco)
View(resultado3)
View(resultados3)
banco4= banco
colnames(banco4)[5] <- "peso"
colnames(banco4)[4] <- "altura"
View(banco4)
banco4$peso_kg <- banco4$peso * 0.453592
banco4$altura_m <- banco4$altura/100
ggplot(banco4) + aes(x = altura_m, y = peso_kg) +
geom_point(colour = "#A11D21", size = 3) +
labs(
x = "Altura)",
y = "Peso"
) +
theme_estat()
library(ggplot2)
library(dplyr)
library(stringr)
library(forcats)
library(tibble)
library(tidyr)
banco4= banco
colnames(banco4)[5] <- "peso"
colnames(banco4)[4] <- "altura"
banco4$peso_kg <- banco4$peso * 0.453592
banco4$altura_m <- banco4$altura/100
ggplot(banco4) + aes(x = altura_m, y = peso_kg) +
geom_point(colour = "#A11D21", size = 3) +
labs(
x = "Altura)",
y = "Peso"
) +
theme_estat()
ggsave("disp_uni4.jpg", width = 158, height = 93, units = "mm")
ggplot(banco4) + aes(x = altura_m, y = peso_kg) +
geom_point(colour = "#A11D21", size = 3) +
labs(
x = "Altura(Metro)",
y = "Peso (KG)"
) +
theme_estat()
ggsave("disp_uni4.jpg", width = 158, height = 93, units = "mm")
View(print_quadro_resumo)
print_quadro_resumo <- function(data, var_name, title = "Medidas resumo da(o) [nome da variável]", label = "quad:quadro_resumo1") {
var_name <- substitute(var_name)  # Captura o nome da variável
data <- data %>%
summarize(
`Média` = round(mean(!!sym(var_name), na.rm = TRUE), 2),
`Desvio Padrão` = round(sd(!!sym(var_name), na.rm = TRUE), 2),
`Variância` = round(var(!!sym(var_name), na.rm = TRUE), 2),
`Mínimo` = round(min(!!sym(var_name), na.rm = TRUE), 2),
`1º Quartil` = round(quantile(!!sym(var_name), probs = 0.25, na.rm = TRUE), 2),
`Mediana` = round(quantile(!!sym(var_name), probs = 0.5, na.rm = TRUE), 2),
`3º Quartil` = round(quantile(!!sym(var_name), probs = 0.75, na.rm = TRUE), 2),
`Máximo` = round(max(!!sym(var_name), na.rm = TRUE), 2)
) %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
latex <- str_c("\\begin{quadro}[H]\n",
"\\caption{", title, "}\n",
"\\centering\n",
"\\begin{tabular}{", sep = "")
col_count <- ncol(data)
row_count <- nrow(data)
latex <- str_c(latex, "| l |\n", sep = "")
for (i in seq(2, col_count)) {
numCount <- data[i, -c(1)] %>%
as.numeric() %>%
{ floor(log10(.)) + 1 } %>%
max()
latex <- str_c(latex, "\t\t\tS[table-format = ", numCount, ".2]\n", sep = "")
}
latex <- str_c(latex, "\t\t\t|}\n\t\\toprule\n\t\t", sep = "")
if (col_count > 2) {
for (i in seq(1, col_count)) {
if (i == 1)
latex <- str_c(latex, "\\textbf{Estatística}", sep = "")
else
latex <- str_c(latex, " \\textbf{", data[1, i], "}", sep = "")
if (i < col_count)
latex <- str_c(latex, "&", sep = "")
else
latex <- str_c(latex, "\\\\\n", sep = "")
}
} else {
latex <- str_c(latex, "\\textbf{Estatística} & \\textbf{Valor} \\\\\n", sep = "")
}
latex <- str_c(latex, "\t\t\\midrule\n", sep = "")
if (col_count > 2)
starting_number <- 2
else
starting_number <- 1
for (i in seq(starting_number, row_count)) {
latex <- str_c(latex, "\t\t", str_flatten(t(data[i, ]), collapse = " & "), " \\\\\n")
}
latex <- str_c(latex, "\t\\bottomrule\n\n",
"\t\\end{tabular}\n",
"\t\\label{", label, "}\n",
"\t\\end{adjustbox}\n",
"\\end{quadro}", sep = "")
writeLines(latex)  # Escreve o código LaTeX na saída
}
resultado2 %>%
group_by(Sport) %>% # caso mais de uma categoria
print_quadro_resumo(var_name = IMC)
library(ggplot2)
library(dplyr)
library(stringr)
library(forcats)
library(tibble)
library(tidyr)
c1 <- read_excel("~/Olimpiadas 2000 - 2016.xlsx", sheet = "Athina")
